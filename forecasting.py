# -*- coding: utf-8 -*-
"""Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sWAZnufnmMIlIYfjDCVR4wkMC8nHo7Lk
"""

!python -m pip install prophet
!pip install plotly==5.9.0

from prophet import Prophet



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose

+from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

customers = pd.read_csv("/content/drive/MyDrive/Copy of olist_customers_dataset.csv")
1
geolocation = pd.read_csv("/content/drive/MyDrive/Copy of olist_geolocation_dataset (1).csv")
order_items = pd.read_csv("/content/drive/MyDrive/Copy of olist_order_items_dataset.csv")
order_payments = pd.read_csv("/content/drive/MyDrive/Copy of olist_order_payments_dataset.csv")
order_reviews = pd.read_csv("/content/drive/MyDrive/Copy of olist_order_reviews_dataset.csv") # null value exist 
orders= pd.read_csv("/content/drive/MyDrive/Copy of olist_orders_dataset.csv") # null value exist 
products = pd.read_csv("/content/drive/MyDrive/Copy of olist_products_dataset.csv") # null value exist 
sellers = pd.read_csv("/content/drive/MyDrive/Copy of olist_sellers_dataset.csv")
product_category_name_translation = pd.read_csv("/content/drive/MyDrive/Copy of product_category_name_translation.csv")

df =pd.merge(orders,order_payments,on = 'order_id')

df.head()

df.shape

df.describe()

df.isnull().sum()

df =df.dropna()

df.isnull().sum()



#count_of_payment = df['payment_value'].value_counts()
#count_of_payment

#df["total_payment_by_Date"] = count_of_payment*count_of_payment.index

df.head(5)

df10= df[["order_delivered_customer_date","payment_value"]].groupby('order_delivered_customer_date').sum().reset_index()

df10.head()

df10.dtypes

df10.isnull().sum()

#df10.total_payment_by_Date.hist(bins=2000)

df10.columns = ['ds','y']

df10.dtypes

df10['ds']= pd.to_datetime(df10['ds'])
df10.head()

df10.dtypes

m = Prophet()
m.fit(df10)

future1 = m.make_future_dataframe(periods = 1095)
future1.tail()

forecast1 = m.predict(future1)
forecast1[['ds','yhat','yhat_lower','yhat_upper']].tail()

fig1 = m.plot(forecast1)



fig2 = m.plot_components(forecast1)

from prophet.plot import plot_plotly, plot_components_plotly
plot_plotly(m,forecast1)

plot_components_plotly(m,forecast1)











